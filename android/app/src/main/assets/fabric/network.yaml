---
#
# The network connection profile provides client applications the information about the target
# blockchain network that are necessary for the applications to interact with it. These are all
# knowledge that must be acquired from out-of-band sources. This file provides such a source.
#
name: "mysomedapp"

#
# Describe what the target network is/does.
#
description: "MySoMeNetwork"

#
# Schema version of the content. Used by the SDK to apply the corresponding parsing rules.
#
version: "1.0"

#
# The client section will be added on a per org basis see org1.yaml and org2.yaml
#
#client:
# The client section used by GO SDK.
client:
  organization: bityoga
  # Global configuration for peer, event service and orderer timeouts
  peer:
    timeout:
      connection: 18s
      queryResponse: 45s
      executeTxResponse: 30s
  eventService:
    timeout:
      connection: 18s
      registrationResponse: 18s
  orderer:
    timeout:
      connection: 18s
      response: 18s
  credentialStore:
    path: "LOCAL_KVS_PATH"
    cryptoStore:
      path: "LOCAL_MSP_PATH"

  # BCCSP config for the client. Used by GO SDK. It's the Blockchain Cryptographic Service Provider.
  # It offers the implementation of cryptographic standards and algorithms.
  BCCSP:
    security:
     enabled: false
     default:
      provider: "SW"
     hashAlgorithm: "SHA2"
     softVerify: true
     ephemeral: false
     level: 256

  tlsOptions:
    verify: false

  tlsCerts:
    systemCertPool: false

    # client:
    #   keyfile: ./common_certs/tls/orderer0-mysome-ca.pem

#
# [Optional]. But most apps would have this section so that channel objects can be constructed
# based on the content below. If an app is creating channels, then it likely will not need this
# section.
#
channels:
  # name of the channel
  mysomechannel:
    # Required. list of orderers designated by the application to use for transactions on this
    # channel. This list can be a result of access control ("org1" can only access "ordererA"), or
    # operational decisions to share loads from applications among the orderers.  The values must
    # be "names" of orgs defined under "organizations/peers"
    orderers:
      - orderer0-mysome

    # Required. list of peers from participating orgs
    peers:
      peer0-bityoga:
        # [Optional]. will this peer be sent transaction proposals for endorsement? The peer must
        # have the chaincode installed. The app can also use this property to decide which peers
        # to send the chaincode install request. Default: true
        endorsingPeer: true

        # [Optional]. will this peer be sent query proposals? The peer must have the chaincode
        # installed. The app can also use this property to decide which peers to send the
        # chaincode install request. Default: true
        chaincodeQuery: true

        # [Optional]. will this peer be sent query proposals that do not require chaincodes, like
        # queryBlock(), queryTransaction(), etc. Default: true
        ledgerQuery: true

        # [Optional]. will this peer be the target of the SDK's listener registration? All peers can
        # produce events but the app typically only needs to connect to one to listen to events.
        # Default: true
        eventSource: true

    # [Optional]. what chaincodes are expected to exist on this channel? The application can use
    # this information to validate that the target peers are in the expected state by comparing
    # this list with the query results of getInstalledChaincodes() and getInstantiatedChaincodes()
    chaincodes:
      # the format follows the "cannonical name" of chaincodes by fabric code
      #- user_cc:v0
      #- contact_cc:v0

#
# list of participating organizations in this network
#
organizations:
  bityoga:
    mspid: bitYogaMSP
    cryptoPath: "COMMON_CERTS_TLS_PATH"
    peers:
      - peer0-bityoga

    # [Optional]. Certificate Authorities issue certificates for identification purposes in a Fabric based
    # network. Typically certificates provisioning is done in a separate process outside of the
    # runtime network. Fabric-CA is a special certificate authority that provides a REST APIs for
    # dynamic certificate management (enroll, revoke, re-enroll). The following section is only for
    # Fabric-CA servers.
    certificateAuthorities:
      - rca-bityoga
#
# List of orderers to send transaction and channel create/update requests to. For the time
# being only one orderer is needed. If more than one is defined, which one get used by the
# SDK is implementation specific. Consult each SDK's documentation for its handling of orderers.
#
orderers:
  orderer0-mysome:7050:
    url: grpc://FABRIC_IP:7050

    # these are standard properties defined by the gRPC library
    # they will be passed in as-is to gRPC client constructor
    grpcOptions:
      ssl-target-name-override: orderer.example.com
      grpc-max-send-message-length: 15

    tlsCACerts:
      path: ORDERER_CERT_PATH

    certificateAuthorities:
      - rca-bityoga

#
# List of peers to send various requests to, including endorsement, query
# and event listener registration.
#
peers:
  peer0-bityoga:
    # this URL is used to send endorsement and query requests
    url: grpc://FABRIC_IP:7051

    # this URL is used to connect the EventHub and registering event listeners
    eventUrl: grpc://FABRIC_IP:7053

    grpcOptions:
      ssl-target-name-override: peer0-bityoga
    tlsCACerts:
      path: PEER_CERT_PATH

certificateAuthorities:
  rca-bityoga:
    url: https://FABRIC_IP:7055
    tls:
      enabled: false
    tlsOptions:
      enabled: false
    # httpsOptions:
    #   verify: false
    # tlsOptions:
    #   verify: false
    tlsCACerts:
      path: ROOT_CA_CERT_PATH
